🔥 Perfect debugging question — this is a classic Express mistake that every backend developer encounters.

Let’s break it down step by step so you understand exactly why this happens and how to fix it.

🧩 Your Code
app.get("/info", (req, res, next) => {
  console.log("Info 1");
  res.send("Info1");
  next(); // ❌ Problem here
}, (req, res) => {
  console.log("Info 2");
  res.send("Info 2");
});

⚙️ What’s Happening Behind the Scenes

Express allows multiple callbacks for the same route:

app.get("/route", middleware1, middleware2, middleware3);


Each callback receives (req, res, next) and can:

Do something with the request/response

Then call next() to move to the next function in the chain

✅ But here’s the key rule:

Once you send a response (res.send, res.json, res.end, etc.),
you must not call next() again, because the response is already sent to the client.

⚡ What’s Happening in Your Case

Request comes to /info

First callback runs:

console.log("Info 1");
res.send("Info1");  // ✅ Response already sent to client
next();              // ❌ You’re telling Express to continue to the next handler


Express executes the next callback:

console.log("Info 2");
res.send("Info 2"); // ❌ Tries to send another response


At this point, the response headers are already sent, so Express throws:

Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client


because it’s illegal in HTTP to send two responses for a single request.

✅ Correct Ways to Fix It
Option 1: Remove next() after sending response
app.get("/info", (req, res, next) => {
  console.log("Info 1");
  res.send("Info 1");
});

Option 2: Use next() only if you don’t send a response yet
app.get("/info", (req, res, next) => {
  console.log("Info 1");
  next(); // okay here, since no res.send() yet
}, (req, res) => {
  console.log("Info 2");
  res.send("Info 2");
});


So if the first handler does something like authentication, logging, validation, etc. — you can safely call next() as long as you haven’t ended the response.

🧠 Think of It Like This

next() = “Move on to the next middleware”

res.send() = “We’re done — send data and close the request.”

You can do one or the other, but not both in the same flow.

🧰 Tip: To Prevent This Error in the Future

If you ever need to conditionally call next():

if (!res.headersSent) next();


This ensures you don’t call next() after sending a response.